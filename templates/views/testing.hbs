<!DOCTYPE html>
<html lang="en">
<head>
    <title>{{ head_title }}</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link href="/css/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="/css/testing.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
</head>
<body>
    <div id="app-testing" class="container pt-3" style="display:none;">
        <div v-if="fetchingData" class="text-center text-white loading-box"><img src="img/loading3.gif" class="icon-loading mr-2">{? loadingText ?}</div>
        <div v-if="header.visible" class="row text-dark white-transparent-high py-3 px-2 d-flex align-items-center mb-4 fade-in">
            <div class="col-md-4">
                <h2 class="my-0 py-0">{? header.testName ?}</h2>
                <p class="my-0 py-0"><i class="far fa-question-circle mr-2"></i>Số câu hỏi: <b>{? header.testQuestCount[0] ?}/{? header.testQuestCount[1] ?}</b></p>
            </div>
            <div class="col-md-4 text-center">
                <p class="my-0 py-0"><i class="far fa-clock mr-2"></i>Thời gian làm bài</p>
                <h2>{? header.testTimeleft ?}</h2>
            </div>
             <div class="col-md-4 text-right">
                <p class="my-0 py-0"><i class="fas fa-power-off mr-2"></i>Trạng thái</p>
                <h2>{? header.testStatus ?}</h2>
            </div>
        </div>
        <div v-if="lobby.visible" class="fade-in">
            <div class="row mb-4 mt-5">
                <div class="col-md-12">
                    <div class="white-transparent-high text-dark px-3 py-2 d-flex justify-content-between align-items-center">
                        <h5 class="text-center my-0 py-0"><i class="fas fa-users mr-2"></i>Sinh viên tham dự</h5>
                        <h3>{? lobby.users.length ?}</h3>
                    </div>
                </div>
            </div>
            <div class="row">
                <div v-for="st in lobby.users" class="col-md-3 mb-3">
                    <div class="white-transparent-high text-dark px-3 py-2"><i class="fas fa-user mr-2"></i>{? st ?}</div>
                </div>
            </div>
        </div>
        <div v-if="testing.visible" class="fade-in">
            <div class="card rounded-0">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-pen-fancy mr-2"></i>Bài làm</h5>
                    <button @click="saveTest" class="btn btn-info btn-sm" :disabled="testing.saveStatus >= 1">
                        <span v-if="testing.saveStatus == 0"><i class="far fa-save mr-2"></i>Lưu bài</span>
                        <div v-if="testing.saveStatus == 1" class="lds-hourglass mr-2"></div>
                        <span v-if="testing.saveStatus == 2"><i class="far fa-check-circle mr-2"></i>Đã lưu bài ({? testing.savedCount[0] ?}/{? testing.savedCount[1] ?})</span>
                    </button>
                </div>
                <div class="card-body">
                    <h5><i>Phần {? testing.parts[testing.quests[testing.selectedQuest].PartID] ?}</i></h5>
                    <h4>Câu {? testing.selectedQuest + 1 ?}. {? testing.quests[testing.selectedQuest].CONTENT ?}</h4>
                    <div class="ml-md-4 mb-3">
                        <div v-for="(a, i) in testing.quests[testing.selectedQuest].ANSWERS" class="radio">
                            <label class="mb-0"><input type="radio" @change="onCheckChange" class="mr-2" :value="a.AnsID" v-model="testing.quests[testing.selectedQuest].CHOICE" :data-answer-id="a.AnsID">{? a.AnsContent ?}</label>
                        </div>
                    </div>
                    <!-- <button class="btn btn-outline-info btn-sm"><i class="far fa-arrow-alt-circle-left mr-2"></i>Câu trước</button> -->
                    <button v-if="testing.selectedQuest < testing.quests.length-1" @click="nextQuest" class="btn btn-outline-primary btn-sm"><i class="far fa-arrow-alt-circle-right mr-2"></i>Câu kế tiếp</button>
                </div>
                <div class="card-footer">
                    <nav style="overflow: auto;">
                        <ul class="pagination my-0">
                            <li v-for="(q, i) in testing.quests" class="page-item" :class="{ active: i == testing.selectedQuest }">
                                <a @click="selectQuest" :data-quest-index="i" :data-quest-id="q.QuestID" class="page-link" :class="{'bg-success': q.CHOICE != null, 'text-white': q.CHOICE != null}" href="#">{? i+1 ?}</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
        <div v-if="result.visible">
            <div class="row mb-2 mt-5 d-flex justify-content-center">
                <div class="col-md-6">
                    <div class="white-transparent-high text-dark px-3 py-2">
                        <h5 class="text-center my-0 py-0"><i class="far fa-check-circle mr-2"></i>Kết quả kiểm tra</h5>
                    </div>
                </div>
            </div>
            <div class="row d-flex justify-content-center">
                <div class="col-md-6">
                    <div class="white-transparent-high text-dark px-3 py-5 text-center">
                        <div class="row">
                            <div class="col-md-6">
                                <b>Tổng số câu đúng</b>
                                <h1>{? result.correctAnswers ?}/{? result.totalAnswers ?}</h1>
                            </div>
                            <div class="col-md-6">
                                <b>Điểm số</b>
                                <small>(Tối đa: 10)</small>
                                <h1>{? result.mark ?}</h1>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script src="js/bootstrap.bundle.min.js"></script>
    <script src="js/vue.js"></script>
    <script src="js/babel.min.js"></script>
    <script type="text/babel">
        var vm = new Vue({
            el: "#app-testing",
            delimiters: ['{?','?}'],
            data: {
                testId: {{ testId }},
                userId: {{ user.UserID }},
                socket: null,
                fetchingData: true,
                loadingText: "Đang kết nối...",
                clientStatus: 0,
                header: {
                    visible: false,
                    testName: "Kiểm tra lịch sử",
                    testStatus: "Mở phòng",
                    testQuestCount: [0, 10],
                    testTimeleft: "44:30"
                },
                lobby: {
                    visible: false,
                    users: []
                },
                testing: {
                    visible: false,
                    parts: [],
                    quests: [],
                    selectedQuest: 0,
                    saveStatus: 0,
                    savedCount: [0, 0]
                },
                result: {
                    visible: false,
                    correctAnswers: 0,
                    totalAnswers: 0,
                    mark: 0
                }
            },
            computed: {
                
            }, 
            methods: {
                socketConnect() {
                    this.socket = io();
                    this.socket.on('connect', this.socketOnConnected);
                    this.socket.on('disconnect', this.socketOnDisconnected);
                    this.socket.on('connect_failed', this.socketOnConnectFailed);

                    this.socket.on('join_testinfo', this.socketOnJoinTestInfo);
                    this.socket.on('update_lobby', this.socketOnUpdateLobby);
                    this.socket.on('start_test', this.socketOnStartTest);
                    this.socket.on('save_result', this.socketOnSaveResult);
                    this.socket.on('update_time', this.socketOnUpdateTime);
                    this.socket.on('finish_test', this.socketOnFinishTest);
                },
                socketOnConnected() {
                    this.loadingText = "Đã kết nối, đang tải dữ liệu...";
                    this.socket.emit('join_room', { testId: this.testId, userId: this.userId });
                },
                socketOnDisconnected() {

                },
                socketOnConnectFailed() {
                    this.loadingText = "Không thể kết nối tới máy chú, thử lại sau.";
                },
                socketOnJoinTestInfo(data) {
                    if(this.clientStatus == data.test.STATUS)
                        return

                    this.header = {
                        visible: true,
                        testName: data.test.NAME,
                        testStatus: data.test.STATUS == 1 ? "Mở phòng" : "Làm bài",
                        testQuestCount: ['-','-'],
                        testTimeleft: ((data.test.TESTTIME < 10) ? ("0" + data.test.TESTTIME) : data.test.TESTTIME) + ":00"
                    };

                    this.lobby.users = data.lobby;

                    if(data.test.STATUS == 1) {
                        this.clientStatus = 1;
                        this.lobby.visible = true;
                        this.testing.visible = false;
                    } else if(data.test.STATUS == 2) {
                        this.clientStatus = 2;

                        var questList = this.loadPartQuests(data.parts);
                        this.testing.quests = questList;
                        this.header.testQuestCount = [0, questList.length];

                        this.lobby.visible = false;
                        this.testing.visible = true;

                        this.loadSavedAnswers(data.preSaved);
                        this.updateQuestCount();
                    }

                    this.fetchingData = false;
                },
                socketOnUpdateLobby(data) {
                    this.lobby.users = data;
                },
                socketOnStartTest(data) {
                    var questList = this.loadPartQuests(data.parts);

                    this.testing.quests = questList;
                    this.header.testStatus = "Làm bài";
                    this.header.testQuestCount = [0, questList.length];
                    this.clientStatus = 2;

                    this.lobby.visible = false;
                    this.testing.visible = true;
                },
                loadPartQuests(parts) {
                    var questList = [];
                    for(let p in parts) {
                        let part = parts[p];

                        this.testing.parts[part.ID] = part.NAME;
                        this.shuffleArray(part.QUESTS);

                        for(let q of part.QUESTS)
                            questList.push({
                                QuestID: q.ID,
                                PartID: part.ID,
                                PartQuestID: q.PARTQUESTID,
                                CONTENT: q.CONTENT,
                                ANSWERS: q.ANSWERS,
                                CHOICE: null
                            });
                    }

                    return questList;
                },
                shuffleArray(a) {
                    for (let i = a.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [a[i], a[j]] = [a[j], a[i]];
                    }
                    return a;
                },
                selectQuest: function(e) {
                    var questIndex = Number(e.currentTarget.getAttribute('data-quest-index'));
                    this.testing.selectedQuest = questIndex;
                },
                nextQuest() {
                    if(this.testing.selectedQuest < this.testing.quests.length-1)
                        this.testing.selectedQuest++;
                },
                saveTest() {
                    if(this.testing.saveStatus > 0) 
                        return;

                    this.testing.saveStatus = 1;

                    var saveQuests = [];

                    for(let q in this.testing.quests) {
                        let quest = this.testing.quests[q];
                        if(quest.CHOICE != null) saveQuests.push({
                            PartQuestID: quest.PartQuestID,
                            AnsID: quest.CHOICE
                        });
                    }

                    this.socket.emit('save_test', { testId: this.testId, userId: this.userId, quests: saveQuests });
                },
                onCheckChange() {
                    this.testing.saveStatus = 0;
                    this.updateQuestCount();
                },
                socketOnSaveResult(data) {
                    if(data.status) {
                        this.testing.savedCount = [
                            data.savedCount,
                            this.testing.quests.length
                        ];
                        this.testing.saveStatus = 2;
                    } else {
                        this.testing.saveStatus = 0;
                        alert(data.message);
                    }
                },
                loadSavedAnswers(ans) {
                    for(let q of this.testing.quests)
                        for(let a of ans)
                            if(q.PartQuestID == a.PartQuestID) {
                                q.CHOICE = a.AnsID;
                                break;
                            }
                },
                updateQuestCount() {
                    if(this.clientStatus == 2) {
                        let totalAnswered = 0;
                        for(let q of this.testing.quests)
                            if(q.CHOICE) totalAnswered++;

                        this.header.testQuestCount = [totalAnswered, this.testing.quests.length];
                    }
                },
                socketOnUpdateTime(data) {
                    if(this.clientStatus == 2) {
                        this.header.testTimeleft = data.timeleft[0] + ":" + data.timeleft[1];
                    }
                },
                socketOnFinishTest(data) {
                    if(this.clientStatus != 3) {
                        this.header.testStatus = "Hết giờ";
                        this.clientStatus = 3;

                        this.lobby.visible = false;
                        this.testing.visible = false;
                        

                        this.result.correctAnswers = data.correctAnswers;
                        this.result.totalAnswers = data.totalAnswers;
                        this.result.mark = Math.round((data.correctAnswers / (data.totalAnswers+1) * 10) * 100) / 100;
                        this.result.visible = true;
                    }
                }
            },
            mounted() {
                // Show items after loading VueJS
                document.getElementById("app-testing").style.display = "block";
                this.socketConnect();
            }
        });
    </script>
</body>
</html>