<!DOCTYPE html>
<html lang="en">
<head>
    <title>{{ head_title }}</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link href="/css/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="/css/testing.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
</head>
<body>
    <div id="app-testing" class="container pt-3" style="display:none;">
        <div v-if="centerMessage.show" class="text-center text-white loading-box"><img v-if="centerMessage.loadingEffect" src="/img/loading3.gif" class="icon-loading mr-2">{? centerMessage.text ?}</div>
        <div v-if="header.visible" id="testing-header" class="row bg-dark text-white py-1 px-2 d-flex align-items-center mb-4 fade-in slide-down">
            <div class="col-md-5">
                <h1 class="my-0 py-0 text-uppercase">{? header.gameName ?}</h1>
            </div>
            <div class="col-md-2 text-center">
                <p class="my-0 py-0 text-uppercase"><i class="far fa-question-circle mr-2"></i>Số câu hỏi</p>
                <h2>{? header.gameQuestCount[0] ?}/{? header.gameQuestCount[1] ?}</h2>
            </div>
             <div class="col-md-5 text-right">
                <button v-if="!header.buttonLoading" @click="OnClick_HeaderButton" class="btn btn-danger"><span v-html="header.nextButtonText"></span></button>
                <img v-if="header.buttonLoading" class="icon-loading" src="/img/loading3.gif"/>
            </div>
        </div>
        <div v-if="lobby.visible" class="fade-in slide-up">
            <div class="row mb-5">
                <div class="col-md-10 offset-md-1">
                    <div class="card rounded-0 border-0">
                        <div class="card-header rounded-0 py-2 bg-primary text-white">
                            <h1 class="mb-0 text-center text-uppercase"><i class="fas fa-sign-in-alt mr-2"></i>Tham gia</h1>
                        </div>
                        <div class="card-body pt-3 pb-0">
                            <div class="row">
                                <div class="col-md-12">
                                    <h2 class="text-center mb-2">Cách A</h2>
                                    <div class="d-flex justify-content-around align-items-center">
                                        <div class="alert alert-primary text-center"><h4 class="text-center d-inline mr-2">Truy cập</h4><h3 class="text-center d-inline font-weight-bold">{{ appFullUrl }}</h3></div>
                                        <h1 class="text-center text-primary mb-3"><i class="fas fa-arrow-circle-right"></i></h1>
                                        <div class="alert alert-primary text-center"><h4 class="text-center d-inline mr-2">Nhập mã PIN</h4><h3 class="text-center d-inline font-weight-bold">{{ gamePIN }}</h3></div>
                                        <h1 class="text-center text-primary mb-3"><i class="fas fa-check-circle"></i></h1>
                                    </div>
                                    <hr class="my-3"/>
                                </div>
                                
                                <div class="col-md-6 offset-md-3">
                                    <h2 class="text-center mb-2">Cách B</h2>
                                    <h5 class="text-center">(Sử dụng điện thoại để quét mã QR)</h5>
                                    <div class="alert alert-primary text-center p-1">
                                        <div id="gameQRCode" style="display: flex; justify-content: center; text-align: center;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row d-flex justify-content-center">
                <div v-for="st in lobby.users" class="col-md-3 mb-3">
                    <div class="white-transparent-high bg-dark text-white text-center px-3 py-2"><i class="fas fa-user mr-2"></i>{? st ?}</div>
                </div>
            </div>
        </div>
        <div v-if="gameBoard.visible" class="fade-in slide-up">
            <div v-if="gameBoard.showContent" class="row mb-3">
               <div class="col-md-12 offset-md-0">
                   <div class="card border-0">
                       <div class="card-body bg-question">
                           <div class="row pt-3 mb-4">
                               <div class="col-md-4">
                                   <div class="cicle-info text-center">
                                        <small class="text-uppercase">Thời gian</small>
                                        <h1 class="game-timer-text">{? gameBoard.timer ?}</h1>
                                   </div>
                               </div>
                               <div class="col-md-4 d-flex align-items-center justify-content-center"><h1 class="text-center text-white font-weight-bold"><span class="bg-dark-semi text-uppercase">Câu {? header.gameQuestCount[0] ?}</span></h1></div>
                               <div class="col-md-4">
                                   <div class="square-info text-center">
                                        <small class="text-uppercase">Đã trả lời</small>
                                        <h1 class="answers-text">{? gameBoard.answered ?}</h1>
                                   </div>
                               </div>
                           </div>
                            <h1 class="text-center font-question text-white">{? gameBoard.questContent ?}</h1>
                       </div>
                   </div>
               </div>
            </div>
            <div v-if="gameBoard.showContent" class="row">
                <div v-if="gameBoard.answers[0].id != null" class="col-md-6 mb-4">
                    <div class="btn-answer border-triangle d-flex justify-content-between align-items-center" :class="{ 'answer-wrong': (!gameBoard.answers[0].isCorrect && game.detailStatus == 2) }">
                        <div class="answer-icon text-color-triangle d-flex justify-content-center align-items-center"><span v-if="gameBoard.answers[0].percent == -1">&bigtriangleup;</span><span v-html="gameBoard.answers[0].percent" v-else="gameBoard.answers[0].percent != -1"></span></div>
                        <div class="answer-text ans-triangle d-flex justify-content-center align-items-center text-center p-2" data-answerid="1"><div><span>{? gameBoard.answers[0].content ?}</span></div></div>
                    </div>
                </div>
                <div v-if="gameBoard.answers[1].id != null" class="col-md-6 mb-4">
                    <div class="btn-answer border-circle d-flex justify-content-between align-items-center" :class="{ 'answer-wrong': (!gameBoard.answers[1].isCorrect && game.detailStatus == 2) }">
                        <div class="answer-icon text-color-circle d-flex justify-content-center align-items-center"><span v-if="gameBoard.answers[1].percent == -1">O</span><span v-html="gameBoard.answers[1].percent" v-else="gameBoard.answers[1].percent != -1"></span></div>
                        <div class="answer-text ans-circle d-flex justify-content-center align-items-center text-center p-2" data-answerid="2"><div><span>{? gameBoard.answers[1].content ?}</span></div></div>
                    </div>
                </div>
                <div v-if="gameBoard.answers[2].id != null" class="col-md-6 mb-4">
                    <div class="btn-answer border-cross d-flex justify-content-between align-items-center" :class="{ 'answer-wrong': (!gameBoard.answers[2].isCorrect && game.detailStatus == 2) }">
                        <div class="answer-icon text-color-cross d-flex justify-content-center align-items-center"><span v-if="gameBoard.answers[2].percent == -1">X</span><span v-html="gameBoard.answers[2].percent" v-else="gameBoard.answers[2].percent != -1"></span></div>
                        <div class="answer-text ans-cross d-flex justify-content-center align-items-center text-center p-2" data-answerid="3"><div><span>{? gameBoard.answers[2].content ?}</span></div></div>
                    </div>
                </div>
                <div v-if="gameBoard.answers[3].id != null" class="col-md-6 mb-4">
                    <div class="btn-answer border-square d-flex justify-content-between align-items-center" :class="{ 'answer-wrong': (!gameBoard.answers[3].isCorrect && game.detailStatus == 2) }">
                        <div class="answer-icon text-color-square d-flex justify-content-center align-items-center"><span v-if="gameBoard.answers[3].percent == -1">&#9634;</span><span v-html="gameBoard.answers[3].percent" v-else="gameBoard.answers[3].percent != -1"></span></div>
                        <div class="answer-text ans-square d-flex justify-content-center align-items-center text-center p-2" data-answerid="4"><div><span>{? gameBoard.answers[3].content ?}</span></div></div>
                    </div>
                </div>
            </div>
            <div v-if="gameBoard.showMessage" class="play-fullscreen d-flex justify-content-center align-items-center">
                <h2 v-html="gameBoard.messageText" class="text-center"></h2>
            </div>
        </div>
        <div v-if="ranking.visible" class="fade-in slide-up">
            <div class="row mb-3">
               <div class="col-md-12 offset-md-0">
                   <div class="card border-0">
                       <div class="card-body bg-question pt-5">
                            <h1 class="text-center text-white font-weight-bold mb-5"><span class="bg-dark-semi text-uppercase">Xếp hạng hiện tại</span></h1>
                            <div class="row">
                                <div class="col-md-6 offset-md-3">
                                    <ul class="list-group">
                                        <li v-for="r in ranking.rankList" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center bg-ranking-user">
                                            <h3>{? r.name ?}</h3>
                                            <h3 class="text-white">{? r.point ?}</h3>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                       </div>
                   </div>
               </div>
            </div>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/bootstrap.bundle.min.js"></script>
    <script src="/js/jquery-3.4.1.min.js"></script>
    <script src="/js/qrcode.min.js"></script>
    <script src="/js/vue.js"></script>
    <script src="/js/axios.min.js"></script>
    <script src="/js/babel.min.js"></script>
    <script type="text/babel">
        var vm = new Vue({
            el: "#app-testing",
            delimiters: ['{?','?}'],
            data: {
                siteUrl: "{{ appFullUrl }}",
                presenter: {
                    userId: Number("{{ user.UserID }}"),
                    userToken: "{{ user.UserToken }}",
                },
                game: {
                    id: Number("{{ gameId }}"),
                    PIN: "{{ gamePIN }}",
                    status: 0,
                    detailStatus: 0,
                    questTime: 0
                },
                centerMessage: {
                    show: true,
                    text: "Đang kết nối...",
                    loadingEffect: true
                },
                socket: null,
                header: {
                    visible: false,
                    gameName: "Đố vui địa lý",
                    gameQuestCount: [0, 10],
                    nextButtonText: "<i class='fas fa-forward mr-2'></i>Bỏ qua câu hỏi", // "<i class='fas fa-play-circle mr-2'></i>Bắt đầu trò chơi"
                    buttonLoading: false
                },
                lobby: {
                    visible: false,
                    users: ['Noirefield', 'Cuong Vu','Noirefield', 'Cuong Vu','Noirefield', 'Cuong Vu','Noirefield']
                },
                gameBoard: {
                    visible: false,
                    timer: 0,
                    answered: 0,
                    questContent: "",
                    answers: [
                        { id: null, content: "", percent: -1, isCorrect: false },
                        { id: null, content: "", percent: -1, isCorrect: false },
                        { id: null, content: "", percent: -1, isCorrect: false },
                        { id: null, content: "", percent: -1, isCorrect: false }
                    ],
                    showContent: true,
                    showMessage: false,
                    messageText: "",
                    defaultFontSize: 0
                },
                ranking: {
                    visible: false,
                    rankList: [
                        { name: "Noire Bladefield", point: 99999 },
                        { name: "Neptune Bladefield", point: 87776 },
                        { name: "Vert Bladefield", point: 77 },
                        { name: "Blanc Bladefield", point: 555 },
                        { name: "Sup Bladefield", point: 55555 }
                    ]
                },
                timer: {
                    quest: null
                }
            },
            computed: {
               
            },
            methods: {
                socketConnect() {
                    this.socket = io();
                    this.socket.on('connect', this.socketOnConnected);
                    this.socket.on('disconnect', this.socketOnDisconnected);
                    this.socket.on('connect_failed', this.socketOnConnectFailed);
                    
                    this.socket.on('presenter_verified', this.socketOnPresenterVerified);
                    this.socket.on('presenter_update_playerlist', this.socketOnPresenterUpdatePlayerList);
                    this.socket.on('update_answered', this.socketOnUpdateAnswered);
                },
                socketOnConnected() {
                    this.centerMessage.text = "Đã kết nối, đang tải dữ liệu...";
                    this.socket.emit('present_connect', { userId: this.presenter.userId, gameId: this.game.id, gamePIN: this.game.PIN, userToken: this.presenter.userToken });

                    console.log("Connected");
                },
                socketOnDisconnected() {
                    if(this.game.status == 3) {
                        location.reload();
                        return;
                    }
                    this.ClosePresent('Không thể kết nối tới máy chủ.');
                },
                socketOnConnectFailed() {
                    this.loadingText = "Không thể kết nối tới máy chú, thử lại sau.";
                },
                socketOnPresenterVerified(data) {
                    console.log("Verified: "+data.success);
                    
                    if(data.success) {
                        axios("/present/"+this.game.id+"/presenter_act/get_data")
                        .then(({ data }) => {
                            if(data.success) this.ReadPresentData(data);
                            else this.ClosePresent("Không thể đọc dữ liệu từ máy chủ.");
                        }).catch((error) => {
                            console.log(error);
                            this.ClosePresent("Không thể kết nối tới máy chủ.")
                        });
                    } else this.ClosePresent();
                },
                socketOnPresenterUpdatePlayerList(data) {
                    if(this.game.status == 1) // Only update when in joining state
                        this.lobby.users = data.players;
                },
                socketOnUpdateAnswered(data) {
                    this.gameBoard.answered = data.answered;
                },
                ReadPresentData: function(data) {
                    var game = data.game;
                    console.log("Read Present Data - Status: "+game.STATUS)

                    this.game.status = game.STATUS;
                    this.game.detailStatus = 0;

                    this.header.gameName = game.NAME;
                    this.header.gameQuestCount = [game.DETAIL.QUEST_CURRENT, game.DETAIL.QUEST_TOTAL];

                    switch(game.STATUS) {
                        case 1: // Opening for joining
                            this.header.nextButtonText = "<i class='fas fa-play-circle mr-2'></i>Bắt đầu trò chơi";
                            this.lobby.users = game.PLAYERS;
                            this.lobby.visible = true;

                            setTimeout(() => {
                                try { var qrcode = new QRCode("gameQRCode", { text: this.siteUrl+"/?quickjoin="+this.game.PIN, width: 300, height: 300 }); } catch(e) { }

                            }, 0);

                            break;
                        case 2: // This room is playing
                            if(game.DETAIL.STATUS == 1) { // Viewing question
                                this.game.detailStatus = game.DETAIL.STATUS;
                                this.game.questTime = data.remainTime;

                                this.Set_GameDetailStatus(game.DETAIL.STATUS, { number: game.DETAIL.QUEST_CURRENT, detail: game.CUR_QUEST_DATA, answered: data.Answered });
                                this.gameBoard.visible = true;
                            } else if(game.DETAIL.STATUS == 2) { // Check result
                                this.game.detailStatus = game.DETAIL.STATUS;
                                this.game.questTime = game.QUESTTIME;

                                this.Set_GameDetailStatus(game.DETAIL.STATUS, { number: game.DETAIL.QUEST_CURRENT, detail: game.CUR_QUEST_DATA, correctAnswers: data.correctAnswers, answersCount: data.answersCount, answered: data.Answered });
                                this.gameBoard.visible = true;
                            }

                            break;
                        case 3: // Done
                            this.ranking.rankList = game.END_RESULT.slice(0, 5);
                            this.ranking.visible = true;

                            this.header.nextButtonText = "<i class='far fa-check-circle mr-2'></i>Kết thúc trò chơi";

                            break;
                    }

                    this.header.visible = true;
                    this.centerMessage.show = false;
                },
                ClosePresent: function(reason) {
                    this.header.visible = false;
                    this.lobby.visible = false;
                    this.ranking.visible = false;
                    
                    this.gameBoard.visible = true;
                    this.gameBoard.showContent = false;
                    this.gameBoard.showMessage = true;
                    this.gameBoard.messageText = "<h1 class='text-center'>Mất kết nối!</h1><h6 class='d-block small'>"+reason+".</h6><a href='#' class='d-block mt-5 small' onclick='location.reload();'>Bấm vào đây để kết nối lại</a>";

                    if(this.socket) socket.disconnect();
                },
                OnClick_HeaderButton() {
                    switch(this.game.status)
                    {
                        case 1: // Start the game
                            this.header.buttonLoading = true;

                            axios("/present/"+this.game.id+"/presenter_act/start_game")
                            .then(({ data }) => {
                                if(data.success) {
                                    this.lobby.visible = false;

                                    this.game.status = data.game.status;
                                    this.game.detailStatus = data.game.detailStatus;
                                    this.game.questTime = data.game.questTime;

                                    this.Set_GameDetailStatus(data.game.detailStatus, {...data.quest, answered: 0});
                                    this.gameBoard.visible = true;

                                    // Update the button
                                    this.header.buttonLoading = false;
                                } else {
                                    this.header.buttonLoading = false;
                                    alert(data.message);
                                }
                            }).catch((error) => {
                                this.header.buttonLoading = false;
                                console.log(error);
                                this.ClosePresent("Không thể kết nối tới máy chủ.");
                            });

                            break;
                        case 2: // Playing
                            if(this.game.detailStatus == 1) { // Now check for result
                                var niggerThis = this;
                                niggerThis.header.buttonLoading = true;

                                this.Check_QuestionAnswer(function(success, reason) {
                                    niggerThis.header.buttonLoading = false;
                                    if(!success) alert(reason);
                                });
                            } else if(this.game.detailStatus == 2) { // Go to next question
                                var niggerThis = this;
                                niggerThis.header.buttonLoading = true;

                                this.Check_NextQuestion(function(success, reason) {
                                    niggerThis.header.buttonLoading = false;
                                    if(!success) alert(reason);
                                });
                            }

                            break;
                        case 3: // End Game
                            var result = confirm('Bạn có muốn kết thúc trò chơi?');
                            if(result) {
                                var niggerThis = this;
                                niggerThis.header.buttonLoading = true;

                                axios("/present/"+this.game.id+"/presenter_act/end_game")
                                .then(({ data }) => {
                                    niggerThis.header.buttonLoading = false;
                                    if(data.success) {
                                        location.reload();
                                    } else {
                                        alert(data.message);
                                    }
                                }).catch((error) => {
                                    niggerThis.header.buttonLoading = false;
                                    console.log(error);
                                    this.ClosePresent("Không thể kết nối tới máy chủ.");
                                });
                            }

                            break; 
                    }
                },
                Check_QuestionAnswer(callback) {
                    axios("/present/"+this.game.id+"/presenter_act/check_answer")
                        .then(({ data }) => {
                            if(data.success) {
                                this.game.detailStatus = data.game.detailStatus;

                                for(var i = 0; i < data.answersCount.length; i++) {
                                    var ans = this.gameBoard.answers[i];
                                    if(data.correctAnswers.indexOf(ans.id) != -1) {
                                        ans.isCorrect = true;
                                        ans.percent = "<i class='far fa-check-circle'></i>";
                                    } else {
                                        ans.isCorrect = false;
                                        ans.percent = -1;
                                    }
                                }

                                this.header.nextButtonText = "<i class='fas fa-forward mr-2'></i>Câu hỏi kế tiếp";

                                callback(true, null);
                            } else {
                                callback(false, data.message);
                            }
                        }).catch((error) => {
                            console.log(error);
                            callback(false, "Không thể kết nối tới máy chủ");
                        });
                },
                Check_NextQuestion(callback) {
                    axios("/present/"+this.game.id+"/presenter_act/next_question")
                        .then(({ data }) => {
                            if(data.success) {
                                this.game.status = data.game.status;
                                this.game.detailStatus = data.game.detailStatus;

                                if(this.game.status == 2) {
                                    this.game.questTime = data.game.questTime;

                                    this.Set_GameDetailStatus(data.game.detailStatus, {...data.quest, answered: 0});
                                    this.gameBoard.visible = true;
                                } else if(this.game.status == 3) {
                                    this.gameBoard.visible = false;

                                    this.ranking.rankList = data.ranking;
                                    this.ranking.visible = true;

                                    this.header.nextButtonText = "<i class='far fa-check-circle mr-2'></i>Kết thúc trò chơi";
                                }
                                callback(true, null);
                            } else {
                                callback(false, data.message);
                            }
                        }).catch((error) => {
                            console.log(error);
                            callback(false, "Không thể kết nối tới máy chủ");
                        });
                },
                Set_GameDetailStatus(detailStatus, data) {
                    if(detailStatus == 1) { // Viewing a question and time counting
                        this.header.nextButtonText = "<i class='fas fa-forward mr-2'></i>Kết thúc nhanh câu hỏi";
                        this.header.gameQuestCount[0] = data.number;

                        this.gameBoard.timer = this.game.questTime;
                        this.gameBoard.answered = data.answered;
                        this.gameBoard.questContent = data.detail.Content;

                        for(var i = 0; i < this.gameBoard.answers.length; i++) {
                            var answer = data.detail.Answers[i];

                            this.gameBoard.answers[i].id = answer ? answer.AnsID : null;
                            this.gameBoard.answers[i].content = answer ? answer.Content : "";
                            this.gameBoard.answers[i].percent = -1;
                        }

                        setTimeout(this.Check_ResizeAnswer, 100);
                    } else if(detailStatus == 2) {
                        this.header.nextButtonText = "<i class='fas fa-forward mr-2'></i>Câu hỏi kế tiếp";
                   
                        this.gameBoard.timer = 0;
                        this.gameBoard.answered = data.answered;
                        this.gameBoard.questContent = data.detail.Content;

                        for(var i = 0; i < this.gameBoard.answers.length; i++) {
                            var answer = data.detail.Answers[i];

                            this.gameBoard.answers[i].id = answer ? answer.AnsID : null;
                            this.gameBoard.answers[i].content = answer ? answer.Content : "";
                            this.gameBoard.answers[i].percent = -1;
                        }

                        for(var i = 0; i < data.answersCount.length; i++) {
                            var ans = this.gameBoard.answers[i];
                            if(data.correctAnswers.indexOf(ans.id) != -1) {
                                ans.isCorrect = true;
                                ans.percent = "<i class='far fa-check-circle'></i>";
                            } else {
                                ans.isCorrect = false;
                                ans.percent = -1;
                            }
                        }

                        setTimeout(this.Check_ResizeAnswer, 100);
                    }
                },
                OnTime_Run() {
                    if(this.game.status == 2 && this.game.detailStatus == 1 && this.gameBoard.timer > 0) {
                        this.gameBoard.timer--;
                        if(this.gameBoard.timer <= 0) { // One run
                            var niggerThis = this;
                                niggerThis.header.buttonLoading = true;

                            this.Check_QuestionAnswer(function(success, reason) {
                                niggerThis.header.buttonLoading = false;
                                if(!success) alert(reason);
                            });
                        }
                    }
                },
                Check_ResizeAnswer() {
                    if(this.gameBoard.defaultFontSize <= 0)
                        this.gameBoard.defaultFontSize = parseFloat($(".answer-text[data-answerid='1'] div").css('font-size')); // Make a copy of font-size
                    
                    for(var i = 1; i <= 4; i++) {
                        var outside = ".answer-text[data-answerid='"+i+"']";
                        var inside = ".answer-text[data-answerid='"+i+"'] div";

                        if(this.gameBoard.defaultFontSize > 0)
                            $(inside).css('fontSize', this.gameBoard.defaultFontSize);

                        while($(inside).height() >= $(outside).height()) {
                            var fontsize = $(inside).css('font-size');
                            $(inside).css('fontSize', parseFloat(fontsize) - 1);
                        }
                    }
                }
            },
            mounted() {
                document.getElementById("app-testing").style.display = "block";

                this.timer.quest = setInterval(this.OnTime_Run, 1000);

                this.socketConnect();
            }
        });
    </script>
</body>
</html>